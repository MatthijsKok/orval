/**
 * Generated by orval v6.11.0 üç∫
 * Do not edit manually.
 * Swagger Petstore
 * OpenAPI spec version: 1.0.0
 */
import * as axios from 'axios';
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from 'axios';
import { useQuery, useMutation } from '@tanstack/react-query';
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryResult,
  QueryKey,
} from '@tanstack/react-query';
import { rest } from 'msw';
import { faker } from '@faker-js/faker';
export type CreatePetsBody = {
  name: string;
  tag: string;
};

export type ListPetsParams = { limit?: string };

export interface Error {
  code: number;
  message: string;
}

export type Pets = Pet[];

export type CatType = typeof CatType[keyof typeof CatType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const CatType = {
  cat: 'cat',
} as const;

export interface Cat {
  petsRequested?: number;
  type: CatType;
}

export type DachshundBreed = typeof DachshundBreed[keyof typeof DachshundBreed];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DachshundBreed = {
  Dachshund: 'Dachshund',
} as const;

export interface Dachshund {
  length: number;
  breed: DachshundBreed;
}

export type LabradoodleBreed =
  typeof LabradoodleBreed[keyof typeof LabradoodleBreed];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const LabradoodleBreed = {
  Labradoodle: 'Labradoodle',
} as const;

export interface Labradoodle {
  cuteness: number;
  breed: LabradoodleBreed;
}

export type DogType = typeof DogType[keyof typeof DogType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DogType = {
  dog: 'dog',
} as const;

export type Dog =
  | (Labradoodle & {
      barksPerMinute?: number;
      type: DogType;
    })
  | (Dachshund & {
      barksPerMinute?: number;
      type: DogType;
    });

export type PetCountry = typeof PetCountry[keyof typeof PetCountry];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PetCountry = {
  "People's_Republic_of_China": "People's Republic of China",
  Uruguay: 'Uruguay',
} as const;

export type PetCallingCode = typeof PetCallingCode[keyof typeof PetCallingCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const PetCallingCode = {
  '+33': '+33',
  '+420': '+420',
} as const;

export type Pet =
  | (Dog & {
      '@id'?: string;
      id: number;
      name: string;
      tag?: string;
      email?: string;
      callingCode?: PetCallingCode;
      country?: PetCountry;
    })
  | (Cat & {
      '@id'?: string;
      id: number;
      name: string;
      tag?: string;
      email?: string;
      callingCode?: PetCallingCode;
      country?: PetCountry;
    });

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * @summary List all pets
 */
export const listPets = (
  params?: ListPetsParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Pets>> => {
  return axios.default.get(`/pets`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getListPetsQueryKey = (params?: ListPetsParams) => [
  `/pets`,
  ...(params ? [params] : []),
];

export type ListPetsQueryResult = NonNullable<
  Awaited<ReturnType<typeof listPets>>
>;
export type ListPetsQueryError = AxiosError<Error>;

export const useListPets = <
  TData = Awaited<ReturnType<typeof listPets>>,
  TError = AxiosError<Error>,
>(
  params?: ListPetsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof listPets>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListPetsQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listPets>>> = ({
    signal,
  }) => listPets(params, { signal, ...axiosOptions });

  const query = useQuery<Awaited<ReturnType<typeof listPets>>, TError, TData>(
    queryKey,
    queryFn,
    queryOptions,
  ) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Create a pet
 */
export const createPets = (
  createPetsBody: CreatePetsBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Pet>> => {
  return axios.default.post(`/pets`, createPetsBody, options);
};

export type CreatePetsMutationResult = NonNullable<
  Awaited<ReturnType<typeof createPets>>
>;
export type CreatePetsMutationBody = CreatePetsBody;
export type CreatePetsMutationError = AxiosError<Error>;

export const useCreatePets = <
  TError = AxiosError<Error>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createPets>>,
    TError,
    { data: CreatePetsBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createPets>>,
    { data: CreatePetsBody }
  > = (props) => {
    const { data } = props ?? {};

    return createPets(data, axiosOptions);
  };

  return useMutation<
    Awaited<ReturnType<typeof createPets>>,
    TError,
    { data: CreatePetsBody },
    TContext
  >(mutationFn, mutationOptions);
};

/**
 * @summary Info for a specific pet
 */
export const showPetById = (
  petId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<Pet>> => {
  return axios.default.get(`/pets/${petId}`, options);
};

export const getShowPetByIdQueryKey = (petId: string) => [`/pets/${petId}`];

export type ShowPetByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof showPetById>>
>;
export type ShowPetByIdQueryError = AxiosError<Error>;

export const useShowPetById = <
  TData = Awaited<ReturnType<typeof showPetById>>,
  TError = AxiosError<Error>,
>(
  petId: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof showPetById>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getShowPetByIdQueryKey(petId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof showPetById>>> = ({
    signal,
  }) => showPetById(petId, { signal, ...axiosOptions });

  const query = useQuery<
    Awaited<ReturnType<typeof showPetById>>,
    TError,
    TData
  >(queryKey, queryFn, { enabled: !!petId, ...queryOptions }) as UseQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const getListPetsMock = () =>
  Array.from(
    { length: faker.datatype.number({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() =>
    faker.helpers.arrayElement([
      {
        cuteness: faker.datatype.number({ min: undefined, max: undefined }),
        breed: faker.helpers.arrayElement(['Labradoodle']),
        barksPerMinute: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          undefined,
        ]),
        type: faker.helpers.arrayElement(['dog']),
      },
      {
        length: faker.datatype.number({ min: undefined, max: undefined }),
        breed: faker.helpers.arrayElement(['Dachshund']),
        barksPerMinute: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          undefined,
        ]),
        type: faker.helpers.arrayElement(['dog']),
        '@id': faker.helpers.arrayElement([faker.random.word(), undefined]),
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        tag: faker.helpers.arrayElement([faker.random.word(), undefined]),
        email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
        callingCode: faker.helpers.arrayElement([
          faker.helpers.arrayElement(['+33', '+420', '+33']),
          undefined,
        ]),
        country: faker.helpers.arrayElement([
          faker.helpers.arrayElement(["People's Republic of China", 'Uruguay']),
          undefined,
        ]),
      },
      {
        petsRequested: faker.helpers.arrayElement([
          faker.datatype.number({ min: undefined, max: undefined }),
          undefined,
        ]),
        type: faker.helpers.arrayElement(['cat']),
        '@id': faker.helpers.arrayElement([faker.random.word(), undefined]),
        id: faker.datatype.number({ min: undefined, max: undefined }),
        name: faker.random.word(),
        tag: faker.helpers.arrayElement([faker.random.word(), undefined]),
        email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
        callingCode: faker.helpers.arrayElement([
          faker.helpers.arrayElement(['+33', '+420', '+33']),
          undefined,
        ]),
        country: faker.helpers.arrayElement([
          faker.helpers.arrayElement(["People's Republic of China", 'Uruguay']),
          undefined,
        ]),
      },
    ]),
  );

export const getCreatePetsMock = () =>
  faker.helpers.arrayElement([
    {
      cuteness: faker.datatype.number({ min: undefined, max: undefined }),
      breed: faker.helpers.arrayElement(['Labradoodle']),
      barksPerMinute: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      type: faker.helpers.arrayElement(['dog']),
    },
    {
      length: faker.datatype.number({ min: undefined, max: undefined }),
      breed: faker.helpers.arrayElement(['Dachshund']),
      barksPerMinute: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      type: faker.helpers.arrayElement(['dog']),
      '@id': faker.helpers.arrayElement([faker.random.word(), undefined]),
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      tag: faker.helpers.arrayElement([faker.random.word(), undefined]),
      email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
      callingCode: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['+33', '+420', '+33']),
        undefined,
      ]),
      country: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["People's Republic of China", 'Uruguay']),
        undefined,
      ]),
    },
    {
      petsRequested: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      type: faker.helpers.arrayElement(['cat']),
      '@id': faker.helpers.arrayElement([faker.random.word(), undefined]),
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      tag: faker.helpers.arrayElement([faker.random.word(), undefined]),
      email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
      callingCode: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['+33', '+420', '+33']),
        undefined,
      ]),
      country: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["People's Republic of China", 'Uruguay']),
        undefined,
      ]),
    },
  ]);

export const getShowPetByIdMock = () =>
  faker.helpers.arrayElement([
    {
      cuteness: faker.datatype.number({ min: undefined, max: undefined }),
      breed: faker.helpers.arrayElement(['Labradoodle']),
      barksPerMinute: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      type: faker.helpers.arrayElement(['dog']),
    },
    {
      length: faker.datatype.number({ min: undefined, max: undefined }),
      breed: faker.helpers.arrayElement(['Dachshund']),
      barksPerMinute: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      type: faker.helpers.arrayElement(['dog']),
      '@id': faker.helpers.arrayElement([faker.random.word(), undefined]),
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      tag: faker.helpers.arrayElement([faker.random.word(), undefined]),
      email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
      callingCode: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['+33', '+420', '+33']),
        undefined,
      ]),
      country: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["People's Republic of China", 'Uruguay']),
        undefined,
      ]),
    },
    {
      petsRequested: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
      ]),
      type: faker.helpers.arrayElement(['cat']),
      '@id': faker.helpers.arrayElement([faker.random.word(), undefined]),
      id: faker.datatype.number({ min: undefined, max: undefined }),
      name: faker.random.word(),
      tag: faker.helpers.arrayElement([faker.random.word(), undefined]),
      email: faker.helpers.arrayElement([faker.internet.email(), undefined]),
      callingCode: faker.helpers.arrayElement([
        faker.helpers.arrayElement(['+33', '+420', '+33']),
        undefined,
      ]),
      country: faker.helpers.arrayElement([
        faker.helpers.arrayElement(["People's Republic of China", 'Uruguay']),
        undefined,
      ]),
    },
  ]);

export const getSwaggerPetstoreMSW = () => [
  rest.get('*/pets', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getListPetsMock()),
    );
  }),
  rest.post('*/pets', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getCreatePetsMock()),
    );
  }),
  rest.get('*/pets/:petId', (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, 'Mocked status'),
      ctx.json(getShowPetByIdMock()),
    );
  }),
];
